import{_ as a,c as s,o as t,J as e}from"./chunks/framework.CGIupE7Q.js";const l="/img-run-gui-application-without-desktop-environment/img0.png",n="/img-run-gui-application-without-desktop-environment/img1.png",o="/img-run-gui-application-without-desktop-environment/img2.png",h="/img-run-gui-application-without-desktop-environment/img3.png",r="/img-run-gui-application-without-desktop-environment/img4.png",m=JSON.parse('{"title":"linux在不安装桌面环境的情况下运行gui程序","description":"linux实现不安装桌面环境，运行gui程序","frontmatter":{"title":"linux在不安装桌面环境的情况下运行gui程序","description":"linux实现不安装桌面环境，运行gui程序","createdTime":"2025/8/10 18:51:43","updatedTime":"2025/10/16 11:57:45","readingTime":2,"category":["Linux"],"tag":["Arch Linux"],"hash":"97e4910685b92b3c29bf1c8a0e3a1af07b08fda83fc52787d78ba411b69940ef","head":[["meta",{"name":"robots","content":"index, nofollow"},""]]},"headers":[],"relativePath":"posts/run-gui-application-without-desktop-environment.md","filePath":"posts/run-gui-application-without-desktop-environment.md","lastUpdated":1760587086000}'),p={name:"posts/run-gui-application-without-desktop-environment.md"};function c(d,i,g,k,u,x){return t(),s("div",null,i[0]||(i[0]=[e('<p>在linux做开发的时候，可能会需要开发gui程序，比如opencv，但是桌面环境太大了，会比较占资源，所以这里会尝试不安装桌面环境来启动gui程序</p><h2 id="安装所需要的包" tabindex="-1">安装所需要的包 <a class="header-anchor" href="#安装所需要的包" aria-label="Permalink to &quot;安装所需要的包&quot;">​</a></h2><p>这里用的是Arch Linux，所以用的是pacman包管理工具</p><h3 id="安装xorg相关包" tabindex="-1">安装xorg相关包 <a class="header-anchor" href="#安装xorg相关包" aria-label="Permalink to &quot;安装xorg相关包&quot;">​</a></h3><p>xorg是运行gui程序所需要的包</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Sy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xorg-server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xorg-apps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xorg-xinit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xorg-xclock</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xorg-xeyes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xorg-xcalc</span></span></code></pre></div><ul><li>xorg-server：X 服务器核心</li><li>xorg-apps：Xorg 工具集</li><li>xorg-xinit：启动 X 服务器的工具（startx）</li><li>xorg-xclock, xorg-xeyes, xorg-xcalc: xorg 示例程序</li></ul><h3 id="安装窗口管理器" tabindex="-1">安装窗口管理器 <a class="header-anchor" href="#安装窗口管理器" aria-label="Permalink to &quot;安装窗口管理器&quot;">​</a></h3><p>窗口管理器（Window Manager, WM）是负责管理窗口外观和行为的一个软件层，此处使用i3窗口管理器</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Sy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i3</span></span></code></pre></div><h2 id="配置启动脚本" tabindex="-1">配置启动脚本 <a class="header-anchor" href="#配置启动脚本" aria-label="Permalink to &quot;配置启动脚本&quot;">​</a></h2><ol><li>创建文件 <code>~/.xinitrc</code> ，这个文件是运行startx命令的时候所需要执行的脚本</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.xinitrc</span></span></code></pre></div><ol start="2"><li>在里面写入需要执行的命令：<code>exec i3</code>，保存</li></ol><h2 id="启动xorg并运行gui程序" tabindex="-1">启动xorg并运行gui程序 <a class="header-anchor" href="#启动xorg并运行gui程序" aria-label="Permalink to &quot;启动xorg并运行gui程序&quot;">​</a></h2><h3 id="启动xorg" tabindex="-1">启动xorg <a class="header-anchor" href="#启动xorg" aria-label="Permalink to &quot;启动xorg&quot;">​</a></h3><ol><li>此处终端为tty1</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startx</span></span></code></pre></div><ol start="2"><li>启动之后的界面是这样，一片黑，什么也没有，但是已经成功启动xorg了 <img src="'+l+`" alt=""></li></ol><h3 id="运行gui程序" tabindex="-1">运行gui程序 <a class="header-anchor" href="#运行gui程序" aria-label="Permalink to &quot;运行gui程序&quot;">​</a></h3><ol><li>切换到终端tty2，按住 <code>Ctrl + Alt + F2</code> 进行切换，运行命令</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DISPLAY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:0 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定显示号，这个显示号也就是 tty1 终端那边的显示</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xclock</span></span></code></pre></div><ol start="2"><li>切换到终端tty1，<code>Ctrl + Alt + F1</code> ，此时会看到一个gui程序显示了出来 <img src="`+n+`" alt=""></li></ol><div class="info custom-block"><p class="custom-block-title">INFO</p><p>在opencv开发过程中能正常显示gui，默认不是全屏，窗口可以进行拖动</p></div><h2 id="x11转发" tabindex="-1">X11转发 <a class="header-anchor" href="#x11转发" aria-label="Permalink to &quot;X11转发&quot;">​</a></h2><ol><li>编辑文件 <code>/etc/ssh/sshd_config</code> ，开启x11转发，重启服务</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/ssh/sshd_config</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 把 &#39;#X11Forwarding yes&#39; 的 &#39;#&#39; 去掉，保存</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sshd</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 重启 sshd 服务</span></span></code></pre></div><ol start="2"><li>本机下载ssh客户端和xserver，这里使用的是<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" target="_blank" rel="noreferrer">PuTTY</a>和<a href="https://vcxsrv.com/" target="_blank" rel="noreferrer">VcXsrv</a></li><li>打开vcxsrv，会在后台运行一个x服务器(设置全部默认即可)<br><img src="`+o+'" alt=""></li><li>运行putty，打开x11转发<br><img src="'+h+'" alt=""></li><li>输入ip连接到arch linux</li><li>接下来运行xclock，可以看到有小窗口弹了出来</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xclock</span></span></code></pre></div><p><img src="'+r+'" alt=""></p><h3 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h3><ul><li><a href="https://chatgpt.com/" target="_blank" rel="noreferrer">ChatGPT</a></li><li><a href="https://yuweizzz.github.io/post/install_gui_in_linux/" target="_blank" rel="noreferrer">安装 Linux 图形界面</a></li></ul>',32)]))}const F=a(p,[["render",c]]);export{m as __pageData,F as default};
